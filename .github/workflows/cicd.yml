name: CI/CD Pipeline

on: push

jobs:
  
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        uses: GuillaumeFalourd/clone-github-repo-action@v2.1
        with:
          depth: 1
          branch: 'main'
          owner: 'mohitkumar1313'
          repository: 'scale-spring-app'

  
  build_publish_docker_hub:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_NAMESPACE }}/scale-app:latest

  
  terraform:
    runs-on: ubuntu-latest
    needs: build_publish_docker_hub
    outputs:
      ec2_ip: ${{ steps.ec2_ip.outputs.ec2_ip }}  # Define outputs at the job level
    steps:
      - name: Checkout Terraform Repository
        uses: actions/checkout@v3
        with:
          repository: mohitkumar1313/infrastructure-terraform-spring
          path: terraform

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1  

      - name: Initialize Terraform
        working-directory: terraform
        run: terraform init

      - name: Terraform Apply (Provision EC2 Instance)
        working-directory: terraform
        run: terraform apply -auto-approve

      - name: Output Instance IP
        id: ec2_ip
        working-directory: terraform
        run: |
          ip=$(terraform output -raw instance_public_ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}')
          echo "ec2_ip=$ip" >> $GITHUB_ENV



  
  deploy_to_ec2:
    runs-on: ubuntu-latest
    needs: terraform
    environment: "prod"
    steps:
      - name: Ensure .ssh directory exists
        run: mkdir -p ~/.ssh

      - name: Add EC2 to known hosts
        run: |
          ssh-keyscan -H "$ec2_ip" >> ~/.ssh/known_hosts

      - name: Copy SSH Key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/scale-app.pem
          chmod 600 ~/.ssh/scale-app.pem

      - name: Deploy to EC2
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "Deploying to EC2 IP: $ec2_ip"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ubuntu.pem ubuntu@$ec2_ip << 'EOF'
            export DOCKER_USERNAME="${DOCKER_USERNAME}"
            export DOCKER_PASSWORD="${DOCKER_PASSWORD}"

            # Login to Docker
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

            # Pull and run the Docker image
            docker pull $DOCKER_USERNAME/scale-app:latest
            docker stop scale-app || true
            docker rm scale-app || true
            docker run -d --name scale-app -p 8080:8080 $DOCKER_USERNAME/scale-app:latest
          EOF
