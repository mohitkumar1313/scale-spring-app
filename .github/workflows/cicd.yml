name: CI/CD Pipeline

on: push

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        uses: GuillaumeFalourd/clone-github-repo-action@v2.1
        with:
          depth: 1
          branch: 'main'
          owner: 'mohitkumar1313'
          repository: 'scale-spring-app'

  build_publish_docker_hub:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/scale-app:latest

  terraform:
    runs-on: ubuntu-latest
    needs: build_publish_docker_hub
    outputs:
      ec2_ip: ${{ steps.set_ec2_ip.outputs.ec2_ip }}
    steps:
      - name: Checkout Terraform Repository
        uses: actions/checkout@v3
        with:
          repository: mohitkumar1313/infrastructure-terraform-spring
          path: terraform

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Terraform Init and Refresh
        working-directory: terraform
        run: |
          terraform init
          terraform refresh

      - name: Terraform Apply (Provision EC2 Instance)
        working-directory: terraform
        run: |
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan
          terraform refresh

      - name: List All Terraform Outputs
        working-directory: terraform
        run: terraform output

      - name: Output Instance IP to File
        working-directory: terraform
        run: terraform output -raw instance_public_ip > /tmp/ec2_ip.txt

      - name: Verify IP in Temporary File
        run: |
          echo "Contents of /tmp/ec2_ip.txt:"
          cat /tmp/ec2_ip.txt

      - name: Set EC2 IP as Output
        id: set_ec2_ip
        run: |
          if [ -s /tmp/ec2_ip.txt ]; then
            ip=$(grep -m 1 -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' /tmp/ec2_ip.txt | xargs)
            echo "ec2_ip=$ip" >> $GITHUB_OUTPUT
          else
            echo "Error: /tmp/ec2_ip.txt is empty or does not contain a valid IP" >&2
            exit 1
          fi

  deploy_to_ec2:
    runs-on: ubuntu-latest
    needs: terraform
    environment: "prod"
    steps:
      - name: Wait for EC2 instance to complete setup
        run: sleep 180

      - name: Set EC2 IP Environment Variable
        run: echo "ec2_ip=${{ needs.terraform.outputs.ec2_ip }}" >> $GITHUB_ENV

      - name: Verify EC2 IP in Environment
        run: | 
          echo "Deploying to EC2 IP: ${{ env.ec2_ip }}"

      - name: Ensure .ssh directory exists
        run: mkdir -p ~/.ssh

      - name: Add EC2 to known hosts
        run: ssh-keyscan -H "${{ env.ec2_ip }}" >> ~/.ssh/known_hosts

      - name: Copy SSH Key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/scale-app.pem
          chmod 600 ~/.ssh/scale-app.pem

      - name: Deploy to EC2
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          ec2_ip: ${{ env.ec2_ip }}
        run: |
          echo "Starting deployment to EC2 IP: $ec2_ip"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/scale-app.pem ubuntu@$ec2_ip << 'EOF'
            # Construct the Docker image name using the environment variable
            IMAGE="$DOCKER_USERNAME/scale-app:latest"
            echo "Pulling image: $IMAGE"
            
            # Pull and run the Docker container
            docker pull "$IMAGE"
            docker run -d -p 8081:8081 --name scale-app "$IMAGE"
          EOF
