name: CI/CD Pipeline
on: push
jobs:
  # Job 1: Build
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Clone GuillaumeFalourd/poc-github-actions PUBLIC repository
        uses: GuillaumeFalourd/clone-github-repo-action@v2.1
        with:
          depth: 1
          branch: 'main'
          owner: 'mohitkumar1313'
          repository: 'scale-spring-app'

  # Job 2: Build and Publish Docker Image to Docker Hub
  build_publish_docker_hub:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_NAMESPACE }}/scale-app:latest

  # Job 3: Deploy to EC2
  deploy_to_ec2: 
    runs-on: ubuntu-latest
    needs: build_publish_docker_hub
    environment: "prod"
    steps:
      - name: Ensure .ssh directory exists
        run: mkdir -p ~/.ssh

      - name: Add EC2 to known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_IP }} >> ~/.ssh/known_hosts

      - name: Copy SSH Key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/ubuntu.pem
          chmod 600 ~/.ssh/ubuntu.pem

      - name: Deploy to EC2
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ubuntu.pem ubuntu@${{ secrets.EC2_IP }} << 'EOF'
            export DOCKER_USERNAME="$DOCKER_USERNAME"
            export DOCKER_PASSWORD="$DOCKER_PASSWORD"
          
            # Login to Docker on EC2
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          
            # Pull the latest Docker image
            docker pull "$DOCKER_USERNAME/scale-app:latest"
          
            # Stop and remove the existing container if it exists
            docker stop scale-app || true
            docker rm scale-app || true
          
            # Run the new container
            docker run -d --name scale-app -p 8080:8080 "$DOCKER_USERNAME/scale-app:latest"
          EOF
